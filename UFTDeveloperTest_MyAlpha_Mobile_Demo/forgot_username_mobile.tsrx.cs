//----------------------------------------------------------------------------------------------------
// <auto-generated>
//
//		This code was automatically generated by the UFT Developer Application Model code generator.
//
//		Changes to this file may cause incorrect behavior and will be lost 
//		when the code is regenerated.
//
// </auto-generated>
//----------------------------------------------------------------------------------------------------
using System;
using HP.LFT.SDK;  
using System.Collections.Generic;

namespace UFTDeveloperTest_MyAlpha_Mobile_Demo
{
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("This class is automatically generated by the UFT Developer Application Model code generator.", "15.01")]
	public class MobileForgotUsrAppModel : AppModelBase
	{
		#region Constructors

		public MobileForgotUsrAppModel(ITestObject contextTestObject)
		{
			Name = @"MobileForgotUsrAppModel";
			MyalphaMobileApplication = new MyalphaMobileApplicationNode(contextTestObject, this);
			RebuildDescriptions();
			
		}

		#endregion

		#region Test Objects
	
		public MyalphaMobileApplicationNode MyalphaMobileApplication { get; private set; }
	
		#endregion
	
		#region Inner Classes
	
		public sealed class MyalphaMobileApplicationNode : ApplicationNodeBase
		{
			#region Constructors
		
			public MyalphaMobileApplicationNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				YourDebitCreditOrPrLabel = new YourDebitCreditOrPrLabelNode(this, applicationModel);
				YouCanScanYourCardLabel = new YouCanScanYourCardLabelNode(this, applicationModel);
				UsernameReminderLabel = new UsernameReminderLabelNode(this, applicationModel);
				IForgotMyUsernameLabel = new IForgotMyUsernameLabelNode(this, applicationModel);
				AndYourMobilePhoneLabel = new AndYourMobilePhoneLabelNode(this, applicationModel);
				ASixDigitVerificationLabel = new ASixDigitVerificationLabelNode(this, applicationModel);
				CreditCardEditField = new CreditCardEditFieldNode(this, applicationModel);
				GetStartedButton = new GetStartedButtonNode(this, applicationModel);
				ContinueButton = new ContinueButtonNode(this, applicationModel);
				BackButton = new BackButtonNode(this, applicationModel);
				DisplayName = @"myAlpha Mobile";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Mobile.ApplicationDescription CreateDescription()
			{
				return new HP.LFT.SDK.Mobile.ApplicationDescription {
				IsPackaged = false,
				Identifier = @"com.mobileloft.alpha.droid"
			};
			}
		
			#endregion
		
			#region Test Objects
		
			public YourDebitCreditOrPrLabelNode YourDebitCreditOrPrLabel { get; private set; }
			public YouCanScanYourCardLabelNode YouCanScanYourCardLabel { get; private set; }
			public UsernameReminderLabelNode UsernameReminderLabel { get; private set; }
			public IForgotMyUsernameLabelNode IForgotMyUsernameLabel { get; private set; }
			public AndYourMobilePhoneLabelNode AndYourMobilePhoneLabel { get; private set; }
			public ASixDigitVerificationLabelNode ASixDigitVerificationLabel { get; private set; }
			public CreditCardEditFieldNode CreditCardEditField { get; private set; }
			public GetStartedButtonNode GetStartedButton { get; private set; }
			public ContinueButtonNode ContinueButton { get; private set; }
			public BackButtonNode BackButton { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class YourDebitCreditOrPrLabelNode : LabelNodeBase
			{
				#region Constructors
			
				public YourDebitCreditOrPrLabelNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Your debit, credit or pr";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Mobile.LabelDescription CreateDescription()
				{
					return new HP.LFT.SDK.Mobile.LabelDescription {
					Text = @"Your debit, credit or prepaid card",
					MobileCenterIndex = 3,
					ClassName = @"Label"
				};
				}
			
				#endregion
			
			}

			public sealed class YouCanScanYourCardLabelNode : LabelNodeBase
			{
				#region Constructors
			
				public YouCanScanYourCardLabelNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"You can scan your card";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Mobile.LabelDescription CreateDescription()
				{
					return new HP.LFT.SDK.Mobile.LabelDescription {
					Text = @"You can scan your card",
					MobileCenterIndex = 1,
					ClassName = @"Label"
				};
				}
			
				#endregion
			
			}

			public sealed class UsernameReminderLabelNode : LabelNodeBase
			{
				#region Constructors
			
				public UsernameReminderLabelNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Username Reminder";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Mobile.LabelDescription CreateDescription()
				{
					return new HP.LFT.SDK.Mobile.LabelDescription {
					Text = @"Username Reminder",
					MobileCenterIndex = 0,
					ClassName = @"Label"
				};
				}
			
				#endregion
			
			}

			public sealed class IForgotMyUsernameLabelNode : LabelNodeBase
			{
				#region Constructors
			
				public IForgotMyUsernameLabelNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"I forgot my Username";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Mobile.LabelDescription CreateDescription()
				{
					return new HP.LFT.SDK.Mobile.LabelDescription {
					Text = @"I forgot my Username",
					ResourceId = @"com.mobileloft.alpha.droid:id/2131362718",
					MobileCenterIndex = 3,
					ClassName = @"Label"
				};
				}
			
				#endregion
			
			}

			public sealed class AndYourMobilePhoneLabelNode : LabelNodeBase
			{
				#region Constructors
			
				public AndYourMobilePhoneLabelNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"And your mobile phone";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Mobile.LabelDescription CreateDescription()
				{
					return new HP.LFT.SDK.Mobile.LabelDescription {
					Text = @"And your mobile phone",
					MobileCenterIndex = 4,
					ClassName = @"Label"
				};
				}
			
				#endregion
			
			}

			public sealed class ASixDigitVerificationLabelNode : LabelNodeBase
			{
				#region Constructors
			
				public ASixDigitVerificationLabelNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"A six-digit verification";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Mobile.LabelDescription CreateDescription()
				{
					return new HP.LFT.SDK.Mobile.LabelDescription {
					Text = @"A six-digit verification code has been sent to your registered phone number",
					ResourceId = @"com.mobileloft.alpha.droid:id/2131362609",
					MobileCenterIndex = 1,
					ClassName = @"Label"
				};
				}
			
				#endregion
			
			}

			public sealed class CreditCardEditFieldNode : EditFieldNodeBase
			{
				#region Constructors
			
				public CreditCardEditFieldNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"CreditCardEditField";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Mobile.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.Mobile.EditFieldDescription {
					ResourceId = @"com.mobileloft.alpha.droid:id/2131362242",
					MobileCenterIndex = 0,
					ClassName = @"Input"
				};
				}
			
				#endregion
			
			}

			public sealed class GetStartedButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public GetStartedButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Get started";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Mobile.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.Mobile.ButtonDescription {
					Text = @"Get started",
					ResourceId = @"com.mobileloft.alpha.droid:id/2131363727",
					MobileCenterIndex = 1,
					ClassName = @"Button"
				};
				}
			
				#endregion
			
			}

			public sealed class ContinueButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public ContinueButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Continue";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Mobile.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.Mobile.ButtonDescription {
					Text = @"Continue",
					ResourceId = @"com.mobileloft.alpha.droid:id/2131362606",
					MobileCenterIndex = 1,
					ClassName = @"Button"
				};
				}
			
				#endregion
			
			}

			public sealed class BackButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public BackButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"BackButton";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Mobile.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.Mobile.ButtonDescription {
					ResourceId = @"com.mobileloft.alpha.droid:id/2131363137",
					MobileCenterIndex = 0,
					ClassName = @"Button"
				};
				}
			
				#endregion
			
			}

			#endregion
		}

		#endregion

		#region Base Classes

		public abstract class ButtonNodeBase : AppModelNodeBase<HP.LFT.SDK.Mobile.IButton, HP.LFT.SDK.Mobile.ButtonDescription>, HP.LFT.SDK.Mobile.IButton
		{
			public ButtonNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public void Tap()
			{
				 Concrete.Tap();
			}
	
			public void Tap(HP.LFT.SDK.Mobile.TapArgs args)
			{
				 Concrete.Tap(args);
			}
	
			public void LongPress()
			{
				 Concrete.LongPress();
			}
	
			public void LongPress(HP.LFT.SDK.Mobile.LongPressArgs args)
			{
				 Concrete.LongPress(args);
			}
	
			public void Swipe(HP.LFT.SDK.SwipeDirection direction)
			{
				 Concrete.Swipe(direction);
			}
	
			public void Swipe(HP.LFT.SDK.SwipeDirection direction, HP.LFT.SDK.Mobile.SwipeArgs args)
			{
				 Concrete.Swipe(direction, args);
			}
	
			public void Pan(HP.LFT.SDK.Location start, HP.LFT.SDK.Location end)
			{
				 Concrete.Pan(start, end);
			}
	
			public void Pan(System.Drawing.Point start, System.Drawing.Point end)
			{
				 Concrete.Pan(start, end);
			}
	
			public void Pan(System.Drawing.Point start, System.Drawing.Point end, HP.LFT.SDK.Mobile.PanArgs args)
			{
				 Concrete.Pan(start, end, args);
			}
	
			public void Pinch(double scale)
			{
				 Concrete.Pinch(scale);
			}
	
			public void Pinch(double scale, HP.LFT.SDK.Mobile.PinchArgs args)
			{
				 Concrete.Pinch(scale, args);
			}
	
			#endregion
	
			#region Public Properties
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public string AccessibilityId
			{
				get { return Concrete.AccessibilityId; }		
			}
	
			public string ClassName
			{
				get { return Concrete.ClassName; }		
			}
	
			public string Container
			{
				get { return Concrete.Container; }		
			}
	
			public bool IsClickable
			{
				get { return Concrete.IsClickable; }		
			}
	
			public bool IsFocused
			{
				get { return Concrete.IsFocused; }		
			}
	
			public bool IsFocusable
			{
				get { return Concrete.IsFocusable; }		
			}
	
			public string NativeClass
			{
				get { return Concrete.NativeClass; }		
			}
	
			public string ResourceId
			{
				get { return Concrete.ResourceId; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public bool IsCheckable
			{
				get { return Concrete.IsCheckable; }		
			}
	
			public bool IsChecked
			{
				get { return Concrete.IsChecked; }		
			}
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public string Hint
			{
				get { return Concrete.Hint; }		
			}
	
			public int MobileCenterIndex
			{
				get { return Concrete.MobileCenterIndex; }		
			}
	
			public bool IsEnabled
			{
				get { return Concrete.IsEnabled; }		
			}
	
			#endregion
		}

		public abstract class EditFieldNodeBase : AppModelNodeBase<HP.LFT.SDK.Mobile.IEditField, HP.LFT.SDK.Mobile.EditFieldDescription>, HP.LFT.SDK.Mobile.IEditField
		{
			public EditFieldNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void SetText(string text)
			{
				 Concrete.SetText(text);
			}
	
			public void SetSecure(string encodedText)
			{
				 Concrete.SetSecure(encodedText);
			}
	
			public void SetFocus()
			{
				 Concrete.SetFocus();
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public void Tap()
			{
				 Concrete.Tap();
			}
	
			public void Tap(HP.LFT.SDK.Mobile.TapArgs args)
			{
				 Concrete.Tap(args);
			}
	
			public void LongPress()
			{
				 Concrete.LongPress();
			}
	
			public void LongPress(HP.LFT.SDK.Mobile.LongPressArgs args)
			{
				 Concrete.LongPress(args);
			}
	
			public void Swipe(HP.LFT.SDK.SwipeDirection direction)
			{
				 Concrete.Swipe(direction);
			}
	
			public void Swipe(HP.LFT.SDK.SwipeDirection direction, HP.LFT.SDK.Mobile.SwipeArgs args)
			{
				 Concrete.Swipe(direction, args);
			}
	
			public void Pan(HP.LFT.SDK.Location start, HP.LFT.SDK.Location end)
			{
				 Concrete.Pan(start, end);
			}
	
			public void Pan(System.Drawing.Point start, System.Drawing.Point end)
			{
				 Concrete.Pan(start, end);
			}
	
			public void Pan(System.Drawing.Point start, System.Drawing.Point end, HP.LFT.SDK.Mobile.PanArgs args)
			{
				 Concrete.Pan(start, end, args);
			}
	
			public void Pinch(double scale)
			{
				 Concrete.Pinch(scale);
			}
	
			public void Pinch(double scale, HP.LFT.SDK.Mobile.PinchArgs args)
			{
				 Concrete.Pinch(scale, args);
			}
	
			#endregion
	
			#region Public Properties
	
			public bool IsPassword
			{
				get { return Concrete.IsPassword; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public string AccessibilityId
			{
				get { return Concrete.AccessibilityId; }		
			}
	
			public string ClassName
			{
				get { return Concrete.ClassName; }		
			}
	
			public string Container
			{
				get { return Concrete.Container; }		
			}
	
			public bool IsClickable
			{
				get { return Concrete.IsClickable; }		
			}
	
			public bool IsFocused
			{
				get { return Concrete.IsFocused; }		
			}
	
			public bool IsFocusable
			{
				get { return Concrete.IsFocusable; }		
			}
	
			public string NativeClass
			{
				get { return Concrete.NativeClass; }		
			}
	
			public string ResourceId
			{
				get { return Concrete.ResourceId; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public bool IsCheckable
			{
				get { return Concrete.IsCheckable; }		
			}
	
			public bool IsChecked
			{
				get { return Concrete.IsChecked; }		
			}
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public string Hint
			{
				get { return Concrete.Hint; }		
			}
	
			public int MobileCenterIndex
			{
				get { return Concrete.MobileCenterIndex; }		
			}
	
			public bool IsEnabled
			{
				get { return Concrete.IsEnabled; }		
			}
	
			#endregion
		}

		public abstract class LabelNodeBase : AppModelNodeBase<HP.LFT.SDK.Mobile.ILabel, HP.LFT.SDK.Mobile.LabelDescription>, HP.LFT.SDK.Mobile.ILabel
		{
			public LabelNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public void Tap()
			{
				 Concrete.Tap();
			}
	
			public void Tap(HP.LFT.SDK.Mobile.TapArgs args)
			{
				 Concrete.Tap(args);
			}
	
			public void LongPress()
			{
				 Concrete.LongPress();
			}
	
			public void LongPress(HP.LFT.SDK.Mobile.LongPressArgs args)
			{
				 Concrete.LongPress(args);
			}
	
			public void Swipe(HP.LFT.SDK.SwipeDirection direction)
			{
				 Concrete.Swipe(direction);
			}
	
			public void Swipe(HP.LFT.SDK.SwipeDirection direction, HP.LFT.SDK.Mobile.SwipeArgs args)
			{
				 Concrete.Swipe(direction, args);
			}
	
			public void Pan(HP.LFT.SDK.Location start, HP.LFT.SDK.Location end)
			{
				 Concrete.Pan(start, end);
			}
	
			public void Pan(System.Drawing.Point start, System.Drawing.Point end)
			{
				 Concrete.Pan(start, end);
			}
	
			public void Pan(System.Drawing.Point start, System.Drawing.Point end, HP.LFT.SDK.Mobile.PanArgs args)
			{
				 Concrete.Pan(start, end, args);
			}
	
			public void Pinch(double scale)
			{
				 Concrete.Pinch(scale);
			}
	
			public void Pinch(double scale, HP.LFT.SDK.Mobile.PinchArgs args)
			{
				 Concrete.Pinch(scale, args);
			}
	
			#endregion
	
			#region Public Properties
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public string AccessibilityId
			{
				get { return Concrete.AccessibilityId; }		
			}
	
			public string ClassName
			{
				get { return Concrete.ClassName; }		
			}
	
			public string Container
			{
				get { return Concrete.Container; }		
			}
	
			public bool IsClickable
			{
				get { return Concrete.IsClickable; }		
			}
	
			public bool IsFocused
			{
				get { return Concrete.IsFocused; }		
			}
	
			public bool IsFocusable
			{
				get { return Concrete.IsFocusable; }		
			}
	
			public string NativeClass
			{
				get { return Concrete.NativeClass; }		
			}
	
			public string ResourceId
			{
				get { return Concrete.ResourceId; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public bool IsCheckable
			{
				get { return Concrete.IsCheckable; }		
			}
	
			public bool IsChecked
			{
				get { return Concrete.IsChecked; }		
			}
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public string Hint
			{
				get { return Concrete.Hint; }		
			}
	
			public int MobileCenterIndex
			{
				get { return Concrete.MobileCenterIndex; }		
			}
	
			public bool IsEnabled
			{
				get { return Concrete.IsEnabled; }		
			}
	
			#endregion
		}

		public abstract class ApplicationNodeBase : AppModelNodeBase<HP.LFT.SDK.Mobile.IApplication, HP.LFT.SDK.Mobile.ApplicationDescription>, HP.LFT.SDK.Mobile.IApplication
		{
			public ApplicationNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void Launch()
			{
				 Concrete.Launch();
			}
	
			public void Restart()
			{
				 Concrete.Restart();
			}
	
			public void Install()
			{
				 Concrete.Install();
			}
	
			public void Kill()
			{
				 Concrete.Kill();
			}
	
			public void Uninstall()
			{
				 Concrete.Uninstall();
			}
	
			public void StartCameraSimulationMode(string mediaID)
			{
				 Concrete.StartCameraSimulationMode(mediaID);
			}
	
			public void StopCameraSimulationMode()
			{
				 Concrete.StopCameraSimulationMode();
			}
	
			public void SimulateBarcodeScan(string imageID)
			{
				 Concrete.SimulateBarcodeScan(imageID);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			#endregion
	
			#region Public Properties
	
			public string Identifier
			{
				get { return Concrete.Identifier; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string Version
			{
				get { return Concrete.Version; }		
			}
	
			public bool IsPackaged
			{
				get { return Concrete.IsPackaged; }		
			}
	
			public int Upload
			{
				get { return Concrete.Upload; }		
			}
	
			public HP.LFT.SDK.Mobile.ISimulateAuthResult SimulateAuthentication
			{
				get { return Concrete.SimulateAuthentication; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			#endregion
		}

		#endregion
	}
}
